name: Griddly Build

on:
  push:
    branches: ["master", "develop"]
  # Run on all pull requests
  pull_request:


jobs:
  # build-wasm:
  #   runs-on: ubuntu-latest

  #   steps:
  #   # Checkout the repository
  #   - name: Checkout
  #     uses: actions/checkout@v2

  #   # Install Conan
  #   - name: Install Conan
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install python3-pip
  #       pip3 install conan

  #   # Configure conan for release build
  #   - name: Configure Build
  #     run: |
  #       ./configure.sh

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        manylinux_config:
          - python-version: "3.8"
            py-bin: cp38-cp38
            platform: manylinux_2_28_x86_64
          - python-version: "3.9"
            py-bin: cp39-cp39
            platform: manylinux_2_28_x86_64
          - python-version: "3.10"
            py-bin: cp310-cp310
            platform: manylinux_2_28_x86_64
          # - python-version: "3.11"
          #   py-bin: cp311-cp311
          #   platform: manylinux2014_x86_64
          - python-version: "3.8"
            py-bin: cp38-cp38
            platform: manylinux2014_x86_64
          - python-version: "3.9"
            py-bin: cp39-cp39
            platform: manylinux2014_x86_64
          - python-version: "3.10"
            py-bin: cp310-cp310
            platform: manylinux2014_x86_64
        
    env:
      GRIDDLY_ROOT: ${{ github.workspace }}
      PYBIN: ${{ matrix.manylinux_config.py-bin }}
      PYVERSION: ${{ matrix.manylinux_config.python-version }}
      PLATFORM: ${{ matrix.manylinux_config.platform }}

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Set python version
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.manylinux_config.python-version }}

      # Install Conan
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install python3-pip
          pip3 install conan==1.59.0
          pip3 install poetry

      # Configure conan for release build
      - name: Build
        run: |
          # ./configure.sh --build-type=Release
          # cmake . -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake
          # cmake --build build --config Release

          ./python/manylinux/manylinux-build.sh

      # Run the tests
      - name: Test
        run: |
          ./python/manylinux/manylinux-test.sh

      # Setup python environment
      - name: Poetry install
        run: |
          cd python
          poetry install

      # Run python tests
      - name: Python tests
        run: |
          cd python
          poetry run pytest .

      - name: Python Package
        if: github.ref == 'refs/heads/master' || contains(github.head_ref, 'release-test')
        run: |
          poetry build --format=wheel

      # Upload the built wheels
      - name: Upload wheels
        if: github.ref == 'refs/heads/master' || contains(github.head_ref, 'release-test')
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: python/dist/*.whl

  publish-wheels:
    if: github.ref == 'refs/heads/master' || contains(github.head_ref, 'release-test')
    needs: build-linux
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download wheels
        uses: actions/download-artifact@v2
        with:
          name: wheels
          path: python/dist

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install python3-pip
          pip3 install poetry

      - name: Pypi upload (test)
        if: contains(github.head_ref, 'release-test')
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi ${{ secrets.PYPI_TEST_TOKEN }}
          poetry publish -r test-pypi

      # - name: Pypi upload (prod)
      #   if: github.ref == 'refs/heads/master'
      #   run: |
      #     poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
      #     poetry publish

  # build-macos:
  #   runs-on: macos-latest

  # build-windows:
  #   runs-on: windows-latest
