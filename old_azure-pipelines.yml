trigger:
  batch: true
  branches:
    include:
      - master
      - develop
      - hotfix/*
      - release/*
      - "*test_deploy*"
pr:
  - master
  - develop
  
    
jobs:
  - job: WASM
    timeoutInMinutes: 60
    pool:
      vmImage: "ubuntu-20.04"
    steps:
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: $(griddly_known_hosts_entry)
          sshPublicKey: $(griddly_azure_public_key)
          sshPassphrase: $(griddly_azure_passphrase)
          sshKeySecureFile: griddly
      - checkout: self
        submodules: true
        persistCredentials: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.8"
          addToPath: true
        displayName: Set Python 3.8
        name: py
      - bash: |
          set -ex
          pip install conan==1.59.0
        continueOnError: false
        displayName: Install Conan
      - bash: |
          set -ex
          conan install deps/wasm/conanfile_wasm.txt --profile:host deps/wasm/emscripten.profile --profile:build default -s build_type=Release --build missing -if build_wasm
          cmake . -B build_wasm -GNinja -DWASM=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake
          cmake --build build_wasm --config Release
        displayName: Build

  - job: Linux
    timeoutInMinutes: 60
    pool:
      vmImage: "ubuntu-20.04"
    steps:
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: $(griddly_known_hosts_entry)
          sshPublicKey: $(griddly_azure_public_key)
          sshPassphrase: $(griddly_azure_passphrase)
          sshKeySecureFile: griddly
      - checkout: self
        submodules: true
        persistCredentials: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.8"
          addToPath: true
        displayName: Set Python 3.8
        name: py
      - bash: |
          set -ex
          pip install conan==1.59.0
        continueOnError: false
        displayName: Install Conan
      - bash: |
          set -ex
          conan install deps/conanfile.txt -pr:b=default -pr:h=default -pr:h=deps/build.profile -s build_type=Release --build missing -if build
          cmake . -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DPython_ROOT_DIR:STRING="$(py.pythonLocation)"
          cmake --build build --config Release
        displayName: Build
      - bash: |
          GTEST_FILTER=-*BlockObserverTest*:*SpriteObserverTest* GTEST_OUTPUT=xml:test-report.xml ctest .
        continueOnError: true
        displayName: Test
      - task: PublishTestResults@2
        inputs:
          failTaskOnFailedTests: true
          testResultsFormat: JUnit # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: test-report.xml
          testRunTitle: Ubuntu 20.04 Tests
        displayName: Publish C++ Test Results
      - script: |
          set -ex
          cd python 
          pip install poetry
          poetry install
          poetry run pip install pytest-azurepipelines
          poetry run python -m pytest
        displayName: Run and Publish Python Tests

  - job: PyPiDeployLinux
    dependsOn: Linux
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), contains(variables['Build.SourceBranch'], 'test_deploy')))
    timeoutInMinutes: 60
    pool:
      vmImage: "ubuntu-20.04"
    strategy:
      matrix:
        ManyLinux_2_28_p38:
          PythonVersion: 3.8
          PyBin: cp38-cp38
          PLAT: manylinux_2_28_x86_64
        ManyLinux_2_28_p39:
          PythonVersion: 3.9
          PyBin: cp39-cp39
          PLAT: manylinux_2_28_x86_64
        ManyLinux_2_28_p310:
          PythonVersion: 3.10
          PyBin: cp310-cp310
          PLAT: manylinux_2_28_x86_64
        ManyLinux_2_28_p311:
          PythonVersion: 3.11
          PyBin: cp311-cp311
          PLAT: manylinux_2_28_x86_64
        ManyLinux_2014_p38:
          PythonVersion: 3.8
          PyBin: cp38-cp38
          PLAT: manylinux2014_x86_64
        ManyLinux_2014_p39:
          PythonVersion: 3.9
          PyBin: cp39-cp39
          PLAT: manylinux2014_x86_64
        ManyLinux_2014_p310:
          PythonVersion: 3.10
          PyBin: cp310-cp310
          PLAT: manylinux2014_x86_64
    steps:
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: $(griddly_known_hosts_entry)
          sshPublicKey: $(griddly_azure_public_key)
          sshPassphrase: $(griddly_azure_passphrase)
          sshKeySecureFile: griddly
      - checkout: self
        submodules: true
        persistCredentials: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PythonVersion)
          addToPath: true
        displayName: Set Python $(PythonVersion)
      - bash: |
          set -ex
          pip install conan==1.59.0
        continueOnError: false
        displayName: Install Conan
      - script: |
          set -ex
          export GRIDDLY_ROOT=$(pwd)
          export PYBIN=$(PyBin)
          export PYVERSION=$(PythonVersion)

          ./python/manylinux/manylinux-build.sh
        displayName: Build Wheels
      - task: TwineAuthenticate@1
        displayName: "Twine Authenticate (test)"
        inputs:
          pythonUploadServiceConnection: pypitest
        condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'test_deploy'))
      - task: TwineAuthenticate@1
        displayName: "Twine Authenticate (live)"
        inputs:
          pythonUploadServiceConnection: pypilive
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      - script: |
          pip install twine
          cd python
          python -m twine upload -r "griddly" --config-file $(PYPIRC_PATH) dist/*.whl
        displayName: Deploy To PyPi

  - job: Windows
    timeoutInMinutes: 60
    pool:
      vmImage: "windows-latest"
    steps:
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: $(griddly_known_hosts_entry)
          sshPublicKey: $(griddly_azure_public_key)
          sshPassphrase: $(griddly_azure_passphrase)
          sshKeySecureFile: griddly
      - checkout: self
        submodules: true
        persistCredentials: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: 3.8
          addToPath: true
        displayName: Set Python 3.8
        name: py
      - bash: |
          set -ex
          pip install conan==1.59.0
        continueOnError: false
        displayName: Install Conan
      - bash: |
          set -ex
          conan install deps/conanfile.txt -pr:b=default -pr:h=default -pr:h=deps/build.profile -s build_type=Release --build missing -if build
          cmake . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DPython_ROOT_DIR:STRING="$(py.pythonLocation)"
          cmake --build build --config Release
        displayName: Build
      - bash: |
          export GTEST_FILTER=-*BlockObserverTest*:*SpriteObserverTest*
          export GTEST_OUTPUT=xml:test-report.xml
          ctest . -C Release
        continueOnError: true
        displayName: Test
      - task: PublishTestResults@2
        inputs:
          failTaskOnFailedTests: true
          testResultsFormat: JUnit # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: test-report.xml
          testRunTitle: Windows Tests
        displayName: Publish C++ Test Results
      - bash: |
          set -ex
          cd python
          pip install poetry
          poetry install
          poetry run pip install pytest-azurepipelines
          poetry run python -m pytest
        displayName: Run and Publish Python Tests

  - job: PyPiDeployWindows
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), contains(variables['Build.SourceBranch'], 'test_deploy')))
    dependsOn: Windows
    timeoutInMinutes: 60
    pool:
      vmImage: "windows-latest"
    strategy:
      matrix:
        Windows_p38:
          PythonVersion: 3.8
        Windows_p39:
          PythonVersion: 3.9
        Windows_p310:
          PythonVersion: 3.10
        Windows_p311:
          PythonVersion: 3.11
    steps:
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: $(griddly_known_hosts_entry)
          sshPublicKey: $(griddly_azure_public_key)
          sshPassphrase: $(griddly_azure_passphrase)
          sshKeySecureFile: griddly
      - checkout: self
        submodules: true
        persistCredentials: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PythonVersion)
          addToPath: true
        displayName: Set Python $(PythonVersion)
        name: py
      - bash: |
          set -ex
          pip install conan==1.59.0
        continueOnError: false
        displayName: Install Conan
      - bash: |
          set -ex
          conan install deps/conanfile.txt --profile default --profile deps/build.profile -s build_type=Release --build missing -if build
          cmake . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DPython_ROOT_DIR:STRING="$(py.pythonLocation)"
          cmake --build build --config Release
        displayName: Build
      - script: |
          cd python
          pip install wheel setuptools
          python setup.py bdist_wheel
        displayName: Build Wheels
      - task: TwineAuthenticate@1
        displayName: "Twine Authenticate (test)"
        inputs:
          pythonUploadServiceConnection: pypitest
        condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'test_deploy'))
      - task: TwineAuthenticate@1
        displayName: "Twine Authenticate (live)"
        inputs:
          pythonUploadServiceConnection: pypilive
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      - script: |
          pip install twine
          cd python
          python -m twine upload -r "griddly" --config-file $(PYPIRC_PATH) dist/*.whl
        displayName: Deploy To PyPi

  - job: MacOS
    timeoutInMinutes: 60
    pool:
      vmImage: "macOS-latest"
    steps:
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: $(griddly_known_hosts_entry)
          sshPublicKey: $(griddly_azure_public_key)
          sshPassphrase: $(griddly_azure_passphrase)
          sshKeySecureFile: griddly
      - checkout: self
        submodules: true
        persistCredentials: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: 3.8
          addToPath: true
        displayName: Set Python 3.8
        name: py
      - bash: |
          set -ex
          pip install conan==1.59.0
        continueOnError: false
        displayName: Install Conan
      - bash: |
          set -ex
          conan install deps/conanfile.txt -pr:b=default -pr:h=default -pr:h=deps/build.profile -s build_type=Release --build missing -if build
          cmake . -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DPython_ROOT_DIR:STRING="$(py.pythonLocation)"
          cmake --build build --config Release
        displayName: Build
      - bash: |
          GTEST_FILTER=-*BlockObserverTest*:*SpriteObserverTest* GTEST_OUTPUT=xml:test-report.xml ctest .
        continueOnError: true
        displayName: Test
      - task: PublishTestResults@2
        inputs:
          failTaskOnFailedTests: true
          testResultsFormat: JUnit # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: test-report.xml
          testRunTitle: MacOS Tests
        displayName: Publish C++ Test Results
      - script: |
          set -ex
          cd python 
          pip install poetry
          poetry install
          poetry run pip install pytest-azurepipelines
          poetry run python -m pytest
        displayName: Run and Publish Python Tests

  - job: PyPiDeployMacOS
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), contains(variables['Build.SourceBranch'], 'test_deploy')))
    dependsOn: MacOS
    timeoutInMinutes: 60
    pool:
      vmImage: "macOS-latest"
    strategy:
      matrix:
        MacOS_p38:
          PythonVersion: 3.8
        MacOS_p39:
          PythonVersion: 3.9
        MacOS_p310:
          PythonVersion: 3.10
        MacOS_p311:
          PythonVersion: 3.11
    steps:
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: $(griddly_known_hosts_entry)
          sshPublicKey: $(griddly_azure_public_key)
          sshPassphrase: $(griddly_azure_passphrase)
          sshKeySecureFile: griddly
      - checkout: self
        submodules: true
        persistCredentials: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PythonVersion)
          addToPath: true
        displayName: Set Python $(PythonVersion)
        name: py
      - bash: |
          set -ex
          pip install conan==1.59.0
        continueOnError: false
        displayName: Install Conan
      - bash: |
          set -ex
          conan install deps/conanfile.txt -pr:b=default -pr:h=default -pr:h=deps/build.profile -s build_type=Release --build missing -if build
          cmake . -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DPython_ROOT_DIR:STRING="$(py.pythonLocation)"
          cmake --build build --config Release
        displayName: Build
      - script: |
          cd python
          pip install wheel setuptools
          python setup.py bdist_wheel
        displayName: Build Wheels
      - task: TwineAuthenticate@1
        displayName: "Twine Authenticate (test)"
        inputs:
          pythonUploadServiceConnection: pypitest
        condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'test_deploy'))
      - task: TwineAuthenticate@1
        displayName: "Twine Authenticate (live)"
        inputs:
          pythonUploadServiceConnection: pypilive
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      - script: |
          pip install twine
          cd python
          python -m twine upload -r "griddly" --config-file $(PYPIRC_PATH) dist/*.whl
        displayName: Deploy To PyPi
